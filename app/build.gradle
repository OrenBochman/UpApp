apply plugin: 'com.android.application'

def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return ""
    }
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "org.bochman.myapplication"
        minSdkVersion 16        //needed by places sdk
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Making either of these two values dynamic in the defaultConfig will
        // require a full APK build and reinstallation because the AndroidManifest.xml
        // must be updated.
        versionCode 1
        versionName "1.0"
        resConfigs "en"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        multiDexEnabled true
    }


    buildTypes {

        release {

            buildConfigField "String", "google_maps_key", getProps("myApiKey")
            resValue 'string', "google_maps_key", getProps("myApiKeyUnquoted")

            // These values are defined only for the release build, which
            // is typically used for full builds and continuous builds.
            //buildConfigField("String", "BUILD_TIME", "\"${minutesSinceEpoch}\"")
            //resValue("string", "build_time", "${minutesSinceEpoch}")

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }

        debug {
            // Use static values for incremental builds to ensure that
            // resource files and BuildConfig aren't rebuilt with each run.
            // If these rebuild dynamically, they can interfere with
            // Apply Changes as well as Gradle UP-TO-DATE checks.
            //buildConfigField("String", "BUILD_TIME", "\"0\"")
            //resValue("string", "build_time", "0")

            buildConfigField "String", "google_maps_key", getProps("myApiKey")
            resValue 'string', "google_maps_key", getProps("myApiKeyUnquoted")

            // To avoid using legacy multidex when building from the command line,
            // set minSdkVersion to 21 or higher. When using Android Studio 2.3 or higher,
            // the build automatically avoids legacy multidex when deploying to a device running
            // API level 21 or higherâ€”regardless of what you set as your minSdkVersion.
            versionNameSuffix "-dev"
            applicationIdSuffix '.dev'


            // The following configuration limits the "dev" flavor to using
            // English string resources and xxhdpi screen-density resources.
            //resConfigs "en" "xxhdpi"

            // Disables PNG crunching for the release build type.
            crunchPngs false
            ext.enableCrashlytics = false
        }

    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        // Flag to enable support for the new language APIs
    }



    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    lintOptions {
        baseline "lint-baseline.xml"
        enable 'SyntacticAccessor'
        // Turns off checks for the issue IDs you specify.
        disable 'TypographyFractions', 'TypographyQuotes'
        // Turns on checks for the issue IDs you specify. These checks are in
        // addition to the default lint checks.
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // To enable checks for only a subset of issue IDs and ignore all others,
        // list the issue IDs with the 'check' property instead. This property overrides
        // any issue IDs you enable or disable using the properties above.
        check 'NewApi', 'InlinedApi'
        // If set to true, turns off analysis progress reporting by lint.
        quiet = true
        // if set to true (default), stops the build if errors are found.
        abortOnError = false
        // if true, only report errors.
        ignoreWarnings = true
        htmlReport = true
        textReport=false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.preference:preference:1.1.0'

    // Room for simple persistence with an ORM
    implementation "androidx.room:room-runtime:2.2.1"
    annotationProcessor "androidx.room:room-compiler:2.2.1"
    androidTestImplementation "androidx.room:room-testing:2.2.1"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0-rc01"
    annotationProcessor "androidx.lifecycle:lifecycle-common-java8:2.2.0-rc01"

    // UI
    implementation "com.google.android.material:material:1.0.0"

    // optional - Test helpers for LiveData
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"

    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.libraries.places:places:2.0.0'

    // Third party libs

    implementation "io.reactivex.rxjava2:rxjava:2.2.0"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"

    implementation 'com.facebook.stetho:stetho:1.5.1'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'

    // Retrofit 2
//    implementation 'com.google.code.gson:gson:2.8.6'
//    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
//    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'
//    implementation 'com.squareup.retrofit2:adapter-rxjava:2.6.2'
//    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.2'

    // Dagger 2
    // api 'com.google.dagger:dagger-android:2.25.2'
    // api 'com.google.dagger:dagger-android-support:2.25.2' // if you use the support libraries
    // annotationProcessor 'com.google.dagger:dagger-android-processor:2.25.2'

    // ButterKnife
    //implementation 'com.jakewharton:butterknife:10.2.0'
    //annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.0'

    //Picasso
    implementation 'com.squareup.picasso:picasso:2.71828'


    // Testing ///////////////////////////////////////////////////////////////////////
    testImplementation 'junit:junit:4.12'

    // Core library
    androidTestImplementation 'androidx.test:core:1.2.0'

    // AndroidJUnitRunner and JUnitRules
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    testImplementation "org.mockito:mockito-core:2.23.4"
    testImplementation "org.hamcrest:hamcrest-all:1.3"
    testImplementation 'org.assertj:assertj-core:3.14.0'
    // Assertions
    testImplementation 'com.google.truth:truth:1.0'
    testImplementation 'com.google.truth.extensions:truth-java8-extension:1.0'
    testImplementation 'androidx.test.ext:truth:1.2.0'

    // Fake data
    implementation 'com.github.DiUS:java-faker:PR443-SNAPSHOT'

    // Parceler
    implementation 'org.parceler:parceler-api:1.1.12'
    annotationProcessor 'org.parceler:parceler:1.1.12'

    // Multidex
    implementation 'androidx.multidex:multidex:2.0.1'

}
