gradle.startParameter.showStacktrace = org.gradle.api.logging.configuration.ShowStacktrace.ALWAYS

apply plugin: 'com.android.application'
apply plugin: 'jacoco'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


def getProps(String propName) {
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return ""
    }
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "org.bochman.upapp"
        minSdkVersion 16        //needed by places sdk
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Making either of these two values dynamic in the defaultConfig will
        // require a full APK build and reinstallation because the AndroidManifest.xml
        // must be updated.
        versionCode 1
        versionName "1.0"
        resConfigs "en"


        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString(),
                             "room.incremental":"true",
                             "room.expandProjection":"true"]
            }
        }
        // Required when setting minSdkVersion to 20 or lower
        multiDexEnabled true
    }

    viewBinding {
        enabled = true
    }

    buildTypes {

        release {

            buildConfigField "String", "google_maps_key", getProps("myApiKey")
            resValue 'string', "google_maps_key", getProps("myApiKeyUnquoted")

            // These values are defined only for the release build, which
            // is typically used for full builds and continuous builds.
            //buildConfigField("String", "BUILD_TIME", "\"${minutesSinceEpoch}\"")
            //resValue("string", "build_time", "${minutesSinceEpoch}")

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }

        debug {
            // Use static values for incremental builds to ensure that
            // resource files and BuildConfig aren't rebuilt with each run.
            // If these rebuild dynamically, they can interfere with
            // Apply Changes as well as Gradle UP-TO-DATE checks.
            //buildConfigField("String", "BUILD_TIME", "\"0\"")
            //resValue("string", "build_time", "0")

            buildConfigField "String", "google_maps_key", getProps("myApiKey")
            resValue 'string', "google_maps_key", getProps("myApiKeyUnquoted")

            // To avoid using legacy multidex when building from the command line,
            // set minSdkVersion to 21 or higher. When using Android Studio 2.3 or higher,
            // the build automatically avoids legacy multidex when deploying to a device running
            // API level 21 or higherâ€”regardless of what you set as your minSdkVersion.
            versionNameSuffix "-dev"
            applicationIdSuffix '.dev'


            // The following configuration limits the "dev" flavor to using
            // English string resources and xxhdpi screen-density resources.
            //resConfigs "en" "xxhdpi"

            // Disables PNG crunching for the release build type.
            crunchPngs false
            ext.enableCrashlytics = false
        }

    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        // Flag to enable support for the new language APIs
    }

    // Always show the result of every unit test when running via command line, even if it passes.
    testOptions {

        // access android resources in your unit tests, including your AndroidManifest file.
        unitTests.includeAndroidResources = true

    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    lintOptions {
        baseline "lint-baseline.xml"
        enable 'SyntacticAccessor'
        // Turns off checks for the issue IDs you specify.
        disable 'TypographyFractions', 'TypographyQuotes'
        // Turns on checks for the issue IDs you specify. These checks are in
        // addition to the default lint checks.
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // To enable checks for only a subset of issue IDs and ignore all others,
        // list the issue IDs with the 'check' property instead. This property overrides
        // any issue IDs you enable or disable using the properties above.
        check 'NewApi', 'InlinedApi'
        // If set to true, turns off analysis progress reporting by lint.
        quiet = true
        // if set to true (default), stops the build if errors are found.
        abortOnError = false
        // if true, only report errors.
        ignoreWarnings = true
        htmlReport = true
        textReport = false
    }
}

jacoco {
    toolVersion = "0.7.4+"
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation "androidx.constraintlayout:constraintlayout:1.1.3"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.preference:preference:1.1.0'

    // Room for simple persistence with an ORM
    implementation "androidx.room:room-runtime:2.2.1"
    annotationProcessor "androidx.room:room-compiler:2.2.1"
    androidTestImplementation "androidx.room:room-testing:2.2.1"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0-rc02"
    annotationProcessor "androidx.lifecycle:lifecycle-common-java8:2.2.0-rc02"

    // UI
    //implementation "com.google.android.material:material:1.0.0"

    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.maps.android:android-maps-utils:0.5'
    implementation 'com.google.android.libraries.places:places:2.1.0'

    // Third party libs

    implementation "io.reactivex.rxjava2:rxjava:2.2.0"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"
//
//    implementation 'com.facebook.stetho:stetho:1.5.1'
//    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'

//    Retrofit 2
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.6.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.2.2'

    //  https://square.github.io/okhttp/
    implementation 'com.squareup.okhttp3:okhttp:4.2.2'
    // MockWebServer
    testImplementation("com.squareup.okhttp3:mockwebserver:4.2.1")

    // Dagger 2
    api 'com.google.dagger:dagger-android:2.25.2'
    api 'com.google.dagger:dagger-android-support:2.25.2' // if you use the support libraries
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.25.2'

    //Picasso
    //implementation 'com.squareup.picasso:picasso:2.71828'


    implementation 'com.jakewharton.timber:timber:4.5.1'

    // Testing ///////////////////////////////////////////////////////////////////////

    testImplementation 'junit:junit:4.12'

    testImplementation "org.mockito:mockito-core:2.23.4"

    // Assertions
    testImplementation 'com.google.truth:truth:1.0'
    testImplementation 'com.google.truth.extensions:truth-java8-extension:1.0'
    testImplementation 'androidx.test.ext:truth:1.2.0'
    testImplementation "org.robolectric:robolectric:4.3.1"

//    testImplementation "org.hamcrest:hamcrest-all:1.3"
//    testImplementation 'org.assertj:assertj-core:3.14.0'

    // Core library
    //  androidTestImplementation 'androidx.test:core:1.2.0'

    // AndroidJUnitRunner and JUnitRules
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // optional - Test helpers for LiveData
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"

    // Fake data
    implementation 'com.github.DiUS:java-faker:PR443-SNAPSHOT'

    // Parceler
    implementation 'org.parceler:parceler-api:1.1.12'
    annotationProcessor 'org.parceler:parceler:1.1.12'

    // Multidex
    implementation 'androidx.multidex:multidex:2.0.1'

    testImplementation 'org.apache.httpcomponents:httpcore:4.4.10'
    testImplementation 'org.apache.httpcomponents:httpclient:4.5.6'
    implementation "androidx.core:core-ktx:1.1.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0-rc02"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
repositories {
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    getSourceDirectories().setFrom([mainSrc])
    getClassDirectories().setFrom([debugTree])
    getExecutionData().setFrom(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

// we need all open to run tests which  a we enable only for debug builds.
project.tasks.whenTaskAdded {
    if (it.name == "testReleaseUnitTest") {
        it.enabled = false
    }
}